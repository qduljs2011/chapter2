<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p" 
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       default-lazy-init="false"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans   
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
           http://www.springframework.org/schema/context  
           http://www.springframework.org/schema/context/spring-context-3.0.xsd 
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
           
	<!-- <mvc:annotation-driven />	 -->
	<!--扫包  -->       
	<context:component-scan base-package="com.baobaotao.dao"></context:component-scan>
	<context:component-scan base-package="com.baobaotao.service"></context:component-scan>
	<context:component-scan base-package="com.baobaotao.test.autotest"></context:component-scan>
	<!-- 数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://localhost:3306/sampledb?characterEncoding=utf-8"/>
		<property name="username" value="root"/>
		<property name="password" value="891212js"/>
	</bean>
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" p:dataSource-ref="dataSource" ></bean>
	<!-- 	<bean id="jdbcDaoSupport" class="org.springframework.jdbc.core.support.JdbcDaoSupport" p:dataSource-ref="dataSource" abstract="true"></bean>
	<bean id="userDao" class="com.baobaotao.dao.UserDao" parent="jdbcDaoSupport" /> -->
	<bean id="transactionManage" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" p:dataSource-ref="dataSource"></bean>
	<!-- 通过aop实现事务增强!! -->
	<aop:config proxy-target-class="true">
		<aop:pointcut id="serviceMethod" expression="execution(* com.baobaotao.service..*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethod"/>
	</aop:config>
	<tx:advice id="txAdvice" transaction-manager="transactionManage">
			<tx:attributes>
				<tx:method name="*"/>
			</tx:attributes>
	</tx:advice>
	
	<!-- 测试
		<bean id="carFactory" class="com.baobaotao.test.CarFactory"/>
	-->
	<!--   -->
	<bean id="car" class="com.baobaotao.test.Car" p:brand="test"  p:maxSpeed="100" init-method="myInit" destroy-method="myDestroy" scope="singleton"/>
	<bean id="abstractCar" class="com.baobaotao.test.Car" p:brand="父子" p:color="绿色" abstract="true"  />
	<bean id="car3"  p:color="绿色" parent="abstractCar"/>
	<bean id="car5" class="com.baobaotao.test.CarFactory" factory-method="getHongQi"/>
	<bean id="car2" class="com.baobaotao.test.Car" p:brand="test" scope="prototype" />
	<bean id="magicBoss" class="com.baobaotao.test.MagicBoss">
	 	<lookup-method name="getCar" bean="car2"/>
    </bean>
	<!-- bin工厂后置处理器 -->
	<!-- 
	<bean id="mybeanFactoryPostProcessor" class="com.baobaotao.test.MyBeanFactoryPostProcessor"/>
	<bean id="myBeanPostProcessor"  class="com.baobaotao.test.MyBeanPostProcessor"/>
	 -->
	<bean id="tree" class="com.baobaotao.test.Tree"  scope="request">
	 	<constructor-arg ref="car" index="0"> </constructor-arg>
	 	<constructor-arg type="java.lang.String" value="2" index="2" ></constructor-arg>
	 	<constructor-arg type="java.lang.String" value="1" index="1" ></constructor-arg>
	 	<aop:scoped-proxy/>
	</bean>
	<bean id="tree2" class="com.baobaotao.test.Tree" >
	 	<property name="car" ref="car"></property>
	 	<property name="car.brand" value="级联品牌"></property>
	</bean>
	<bean id="boss" class="com.baobaotao.test.Boss">
	 	<property name="nameList">
	 		<list>
	 			<value>读书</value>
	 			<value>学习</value>
	 		</list>
	 	</property>
	 	<property name="map">
	 		<map>
	 			<entry>
	 				<key> <value>map</value></key>
	 				<ref bean="car"/>
	 			</entry>
	 		</map>
	 	</property>
	</bean>
	<!-- 配置属性文件 -->
	<!--  -->
	<bean class="com.baobaotao.util.EncryptPropertyPlaceholderConfigurer" >
		<property name="locations">
			<list>
				<value>classpath:log4j.properties</value>
			</list>
		</property>
	</bean>
	<!--获取spring容器内其他bin的参数的属性值 -->
	<bean id="car4" class="com.baobaotao.test.Car" parent="abstractCar" p:color="${color}" p:brand="#{car.brand}"/>
	<!-- springAOP 代理 -->
	<bean id="advice" class="com.baobaotao.test.springadvice.MyMethodBeforeAdvice"/>
	<bean id="afterAdvice" class="com.baobaotao.test.springadvice.MyMethodAfter"/>
	<bean id="aroundAdvice" class="com.baobaotao.test.springadvice.MyMethodInterceptor"/>
	<bean id="throwAdvice" class="com.baobaotao.test.springadvice.MyThrowsAdvice"/>
	<!-- 增强结束 -->
	<!-- 代理的类 -->
	<bean id="target" class="com.baobaotao.test.springadvice.NativeWaiter"/>
	<bean id="proxy" class="org.springframework.aop.framework.ProxyFactoryBean" p:interceptorNames="aroundAdvice" p:target-ref="target" p:proxyTargetClass="true"/>
	
	<bean id="updateTarget" class="com.baobaotao.test.proxy.UpdateServiceImpl"/>
	<bean id="updateProxy" class="org.springframework.aop.framework.ProxyFactoryBean" p:interceptorNames="throwAdvice" p:target-ref="updateTarget" p:proxyTargetClass="true"/>
	<!-- 配置切面 -->
	<bean id="waiterTar" class="com.baobaotao.test.aspect.Waitrees"/>
	<bean id="sellerTar" class="com.baobaotao.test.aspect.Seller"/>
	<bean id="greetBeforeAdvice" class="com.baobaotao.test.aspect.GreetBeforeAdvice"/>
	<bean id="greetAdvisor" class="com.baobaotao.test.aspect.GreetingAdvisor" p:advice-ref="greetBeforeAdvice"/>
	<bean id="proxyParent" abstract="true" class="org.springframework.aop.framework.ProxyFactoryBean" p:interceptorNames="greetAdvisor" p:proxyTargetClass="true"  />
	<bean id="waitrees" parent="proxyParent" p:target-ref="waiterTar" />
	<bean id="seller" parent="proxyParent" p:target-ref="sellerTar" />
</beans>